import type { Shader } from "three";

const vertexShaderParsReplace = "#include <uv_pars_vertex>";
const vertexShaderPars = `
  #include <uv_pars_vertex>

  #ifdef USE_MAP

    attribute vec2 atlas_uv_start;
    attribute vec2 atlas_uv_stop;

    varying vec2 v_atlas_uv_start;
    varying vec2 v_atlas_uv_stop;

    varying float v_atlas_texture_u_size;
    varying float v_atlas_texture_v_size;

  #endif
`;

const vertexShaderReplace = "#include <uv_vertex>";
const vertexShader = `
  #include <uv_vertex>

  #ifdef USE_MAP

    v_atlas_uv_start = atlas_uv_start;
    v_atlas_uv_stop = atlas_uv_stop;

    v_atlas_texture_u_size = v_atlas_uv_stop.x - v_atlas_uv_start.x;
    v_atlas_texture_v_size = v_atlas_uv_stop.y - v_atlas_uv_start.y;

  #endif
`;

const fragmentShaderParsReplace = "#include <uv_pars_fragment>";
const fragmentShaderPars = `
  #include <uv_pars_fragment>

  #ifdef USE_MAP

    varying vec2 v_atlas_uv_start;
    varying vec2 v_atlas_uv_stop;

    varying float v_atlas_texture_u_size;
    varying float v_atlas_texture_v_size;

  #endif
`;

const fragmentShaderReplace = "#include <map_fragment>";
const fragmentShader = `
  #ifdef USE_MAP

    vec4 texelColor = texture2D( map, vec2(
      mod( vUv.x, v_atlas_texture_u_size ) + v_atlas_uv_start.x,
      mod( vUv.y, v_atlas_texture_v_size ) + v_atlas_uv_start.y
    ) );

    texelColor = mapTexelToLinear( texelColor );
    diffuseColor *= texelColor;

  #endif
`;

/**
 * This would only work with `THREE.MeshStandardMaterial` shader and texture
 * atlas generated by this package.
 */
export function attachStandardShaderAtlasSampling(shader: Shader): void {
  shader.vertexShader = shader.vertexShader.replace(vertexShaderParsReplace, vertexShaderPars);

  shader.vertexShader = shader.vertexShader.replace(vertexShaderReplace, vertexShader);

  shader.fragmentShader = shader.fragmentShader.replace(fragmentShaderParsReplace, fragmentShaderPars);

  shader.fragmentShader = shader.fragmentShader.replace(fragmentShaderReplace, fragmentShader);
}
